class game:
  def level_one_maze():
    maze = []
    maze.append(["#","#","#","#","#","#","S"])
    maze.append(["#","#","#","#"," ","#","#"])
    maze.append(["#","#","#","#"," ","#","#"])
    maze.append(["#"," "," "," "," "," ","#"])
    maze.append(["F","#","#","#","#","#","#"])
    #S is starting postition
    #F is finish position
    # #'s are blockers and spaces are open to move through
    maze2 = []
    maze2.append(["#","#","#","#","#","#","S"])
    maze2.append(["#","#","#","#"," ","#","#"])
    maze2.append(["#","#","#","#"," ","#","#"])
    maze2.append(["#"," "," "," "," "," ","#"])
    maze2.append(["#","#","#","#"," ","#","#"])
    maze2.append(["#","#","#","#"," ","#","#"])
    maze2.append(["#","#","#","#"," ","#","#"])
    maze2.append(["#","#","#","#"," ","#","#"])
    maze2.append(["#","#","#","#"," ","#","#"])
    maze2.append(["#","#","#","#","F","#","#"])
    maze3 = []
    maze3.append(["#","#","#","#","#","#","S"])
    maze3.append(["#","#","#","#"," ","#","#"])
    maze3.append(["#","#","#","#"," ","#","#"])
    maze3.append(["#","#","#"," "," ","#","#"])
    maze3.append(["#"," "," "," "," "," ","#"])
    maze3.append(["#","#","#","#"," ","#","#"])
    maze3.append(["#"," "," "," "," "," ","#"])
    maze3.append(["#","#","#","#"," ","#","#"])
    maze3.append(["#","#","#","#"," ","#","#"])
    maze3.append(["#","#","#","#"," ","#","#"])
    maze3.append(["#","#","#","#"," ","#","#"])
    maze3.append(["#"," "," "," "," "," ","#"])
    maze3.append(["#","#","#","#"," ","#","#"])
    maze3.append(["#","#","#","#"," ","#","#"])
    maze3.append(["#","#","#","#","F","#","#"])
    maze4 = []
    maze4.append(["#","#","#","#","#","#","S"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#","#","#"," "," ","#","#"])
    maze4.append(["#"," "," "," "," "," ","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#"," "," "," "," "," ","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#"," "," "," "," "," ","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#","#","#"," "," ","#","#"])
    maze4.append(["#"," "," "," "," "," ","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#","#","#","#"," ","#","#"])
    maze4.append(["#","#","#","#","F","#","#"])
    for row in maze:
          print("".join(row))
  level_one_maze();
  def detect_blank_spaces_and_walls(maze):
    blank_spaces = []
    walls = []
    for y, row in enumerate(maze):
        for x, cell in enumerate(row):
            if cell == " ":
                blank_spaces.append((x, y))
            elif cell == "#":
                walls.append((x, y))
    return blank_spaces, walls

    def solve_maze(maze):
      open_set = []
      closed_set = set()
      heapq.heappush(open_set, (0, start, []))
      while open_set:
          current_cost, current_node, path = heapq.heappop(open_set)
          if current_node == end:
              return path + [current_node]
          if current_node in closed_set:
              continue
          closed_set.add(current_node)
          for move in movements:
              new_node = (current_node[0] + move[0], current_node[1] + move[1])
              if 0 <= new_node[0] < len(maze[0]) and 0 <= new_node[1] < len(maze):
                  if maze[new_node[1]][new_node[0]] != "#" and new_node not in closed_set:
                      new_cost = current_cost + 1
                      heapq.heappush(open_set, (new_cost + heuristic(new_node, end), new_node, path + [current_node]))

      return None

  # Find the path from start to finish
  start = None
  end = None
  for y, row in enumerate(maze):
      for x, cell in enumerate(row):
          if cell == "S":
              start = (x, y)
          elif cell == "F":
              end = (x, y)

  if start is not None and end is not None:
      path = a_star(maze, start, end)
      if path is not None:
          print("Path from start to finish:")
          for node in path:
              print(node)
      else:
          print("No path found.")
  else:
      print("Start or end not found in the maze.")

def breadth_first(maze):
  from queue import Queue

def is_valid_move(maze, row, col):
    # Check if the move is within the bounds of the maze and not a wall ('#')
    return 0 <= row < len(maze) and 0 <= col < len(maze[0]) and maze[row][col] != '#'

def bfs(maze):
    start = None
    goal = None

    # Find the starting and finishing positions
    for i in range(len(maze)):
        for j in range(len(maze[0])):
            if maze[i][j] == 'S':
                start = (i, j)
            elif maze[i][j] == 'F':
                goal = (i, j)

    if start is None or goal is None:
        raise ValueError("Maze is missing start or finish.")

    # Define the possible moves: up, down, left, right
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    # Initialize the queue for BFS
    queue = Queue()
    queue.put(start)

    # Initialize the visited set to keep track of visited nodes
    visited = set()
    visited.add(start)

    # Initialize the parent dictionary to reconstruct the path
    parent = {}

    while not queue.empty():
        current = queue.get()

        if current == goal:
            # Reconstruct the path
            path = []
            while current in parent:
                path.insert(0, current)
                current = parent[current]
            path.insert(0, start)
            return path

        for move in moves:
            new_row, new_col = current[0] + move[0], current[1] + move[1]

            if is_valid_move(maze, new_row, new_col) and (new_row, new_col) not in visited:
                queue.put((new_row, new_col))
                visited.add((new_row, new_col))
                parent[(new_row, new_col)] = current

        for i in range(len(maze)):
            for j in range(len(maze[0])):
                if (i, j) in path:
                    print("P", end=" ")  # P represents the path
                else:
                    print(maze[i][j], end=" ")
            print()

  # Example usage
    path1 = bfs(maze)
    if path1:
        print("Path found for maze 1:")
        print_maze_with_path(maze, path1)
    else:
        print("No path found for maze 1.")

    print("\n")

    path2 = bfs(maze2)
    if path2:
        print("Path found for maze 2:")
        print_maze_with_path(maze2, path2)
    else:
        print("No path found for maze 2.")

